#summary Simple code samples to get you started with the framework.
#labels Featured
#sidebar TableOfContents

_(Last updated for ver 0.1.0)_

If you haven't already, be sure to [Installation install the framework] so you can work along with these examples.  It may also be helpful to keep the [http://www.myavatareditor.com/avatarcore/docs/ API Documentation] open for referencing the APIs of the classes used.


== Bare Bones Example ==

For a bare bones example, 4 classes from the framework are needed: Avatar (com.myavatareditor.avatarcore.Avatar), Feature (com.myavatareditor.avatarcore.Feature), Art (com.myavatareditor.avatarcore.Art), and AvatarArt (com.myavatareditor.avatarcore.display.AvatarArt). The Avatar will contain a Feature which in turn references an Art.  Then, that avatar is given to the AvatarArt display object so it can be drawn on the screen.  

Avatars can contain any number of Feature objects, though Features can only reference a single, primary Art object (there can technically be more, but each of those is tied to the same primary Art object).  Art specify what is to be displayed visually.  When an AvatarArt is given an Avatar object to drawn, it automatically reads through its Feature objects and finds all the Art objects that it needs to show on the screen.

<img src="http://www.myavatareditor.com/avatarcore/images/uml_avatar_avatarart.jpg" alt="Avatar Class Diagram" />

==== Sample Code ====

The code below creates an Avatar instance with one Feature specifying Art which references the following image:

<img src="http://www.myavatareditor.com/avatarcore/images/sample_full_face.png" alt="Sample full face art asset" />

If you would like to try this code for yourself, be sure to save the above image in the directory in which you are publishing your SWF.

{{{
import com.myavatareditor.avatarcore.*;
import com.myavatareditor.avatarcore.display.*;

var avatar:Avatar = new Avatar();
var feature:Feature = new Feature();
feature.art = new Art("sample_full_face.png");
avatar.addItem(feature);

var avatarArt:AvatarArt = new AvatarArt(avatar);
addChild(avatarArt);
}}}

Here, you can see that new Avatar and Feature instances are initially created.  The Feature object is then given a new Art instance referencing the PNG image as an externally loaded art asset.  That feature is then given to the Avatar object.  Finally, to display the results, the Avatar is supplied to an AvatarArt display object which is added to the display list to be seen.

When published, the SWF displays the image specified in the Art object.

<img src="http://www.myavatareditor.com/avatarcore/images/sample_bare_bones_swf.png" alt="Sample SWF" />


== Using Features ==

Features represent individual, interchangable characteristics used by Avatars.  For any characteristic in an avatar that a user can change, a respective Feature object should exist for it.

The art of a Feature is defined by the Art object value in the Feature.art property.  Since Avatar objects need to reference many Feature objects, not just one, Avatars implement the ICollection interface (com.myavatareditor.avatarcore.ICollection) storing Feature objects in their collection array.

==== About Collections ====

Collections are groups of multiple objects - usually just beefed up arrays.  The Avatar Core has its own implementation of collections (as do many frameworks) which is defined by the ICollection interface. That interface is implemented by the Collection class (com.myavatareditor.avatarcore.Collection) which many classes within the Avatar Core framework extend, notably Avatar.

In Avatar Core, collections aren't much more than arrays.  These arrays can be accessed directly through the ICollection.collection property.  Additional methods exist in the interface for adding and removing items from this array (ICollection.addItem, ICollection.removeItem, etc.) to make it not only easier, but to set up some additional relationships in collections to allow objects to be referenced more easily.  More specifically, ICollection objects store items not only by indices in arrays, but also by name, allowing items to be easily referenced in a collection through a name using ICollection.getItemByName.  Any object added to a collection with a name property can be referenced in this manner.

Additionally, and this is important in the context of avatar features, collections enforce uniquely named items.  In other words, if you add an item with a name that another item within the same collection already uses, that pre-existing item will be removed before the new item is added.  Avatar Core uses this to make it easy to change features of the same type (name) just by adding the new feature to the collection.  The old feature will automatically be replaced with the new.

==== Sample Code ====

This example separates a face into multiple images, each representative of an avatar characteristic.  In code, each of these are represented by Feature objects where each Feature references the art for that particular characteristic.  Three Features are being used, one for the head, one for the eyes (collectively), and one for the mouth.  The images for each are as follows:

<img src="http://www.myavatareditor.com/avatarcore/images/sample_face_head.png" alt="Sample head art asset" />
<img src="http://www.myavatareditor.com/avatarcore/images/sample_face_eyes.png" alt="Sample eyes art asset" />
<img src="http://www.myavatareditor.com/avatarcore/images/sample_face_mouth.png" alt="Sample mouth art asset" />

If you would like to try this code for yourself, be sure to save the above images in the directory in which you are publishing your SWF.

{{{
import com.myavatareditor.avatarcore.*;
import com.myavatareditor.avatarcore.display.*;

var eyes:Feature = new Feature();
eyes.art = new Art("sample_face_eyes.png");

var mouth:Feature = new Feature();
mouth.art = new Art("sample_face_mouth.png");

var head:Feature = new Feature();
head.art = new Art("sample_face_head.png");

var avatar:Avatar = new Avatar();
avatar.addItem(eyes);
avatar.addItem(mouth);
avatar.addItem(head);

var avatarArt:AvatarArt = new AvatarArt(avatar);
addChild(avatarArt);
}}}

Here, individual Feature instances are created referencing each of the available images.  They are then added to the avatar and displayed in an AvatarArt.  The result:

<img src="http://www.myavatareditor.com/avatarcore/images/sample_bare_bones_swf.png" alt="Sample SWF" />

==== Feature Ordering ====

In the last example working with multiple Features, the order in which the features were added was important.  This is because the head PNG file needed to be displayed below the other PNG files.  AvatarArt will typically use the order of Features in an Avatar collection to determine the order in which they are displayed on the screen.  However, this ordering will change as new Features are added, removed, or replaced within the Avatar.  To ensure that ordering remains well-defined, you can use the zIndex property within the Art class.  

The zIndex property dictates the order in which Art is drawn within an AvatarArt object.  Art with a higher zIndex gets displayed above those with a lower zIndex.

{{{
var artBelow:Art = new Art();
artBelow.zIndex = 1;
var artAbove:Art = new Art();
artAbove.zIndex = 10;
}}}

It may be helpful to keep zIndex values far enough apart to allow room for new feautres should they be added later on.

== Using XML ==

One of the primary goals of the Avatar Core framework is to be able to define almost everything you would need to related to avatars in an external XML file.  Up to this point, everything has been defined directly in code. To make it more flexible, XML can be used to replace the Avatar (along with Feature and Art) definitions.

XML representations of objects mirror their coded counterparts.  Object properties can be defined in XML through either attributes or child nodes of the same name as the property, and child elements not named after properties become definitions within the object's collection (assuming it's of the type ICollection).  The Avatar object in the last example can be defined as:

{{{
<Avatar xmlns="com.myavatareditor.avatarcore">
	<Feature>
		<art src="sample_face_eyes.png" />
	</Feature>
	<Feature>
		<art src="sample_face_mouth.png" />
	</Feature>
	<Feature>
		<art src="sample_face_head.png" />
	</Feature>
</Avatar>
}}}

Notice:
  * The namespace of the XML matches the package path of the classes within the XML
  * Feature nodes in the Avatar node create Feature instances added to the Avatar collection
  * Since art is a property of Feature, the Art instance specified is assigned to that property rather than added as a collection item
  * The src attribute in the art nodes defines the src property of the Art instance

More about how XML can be defined is covered in the [XMLFormat XMLFormat section].

Once XML is defined, it needs to be parsed into its respective object accessible by code.  This is done within Avatar Core through the XMLDefinitionParser class (com.myavatareditor.avatarcore.xml.XMLDefinitionParser).  

==== Sample Code ====

This sample follows the multiple Features example above, only uses XML to specify the Avatar object.

{{{
import com.myavatareditor.avatarcore.*;
import com.myavatareditor.avatarcore.display.*;
import com.myavatareditor.avatarcore.xml.*;

var avatarXML:XML = 
}}}
{{{
<Avatar xmlns="com.myavatareditor.avatarcore">
	<Feature>
		<art src="sample_face_eyes.png" />
	</Feature>
	<Feature>
		<art src="sample_face_mouth.png" />
	</Feature>
	<Feature>
		<art src="sample_face_head.png" />
	</Feature>
</Avatar>;
}}}
{{{
var parser:XMLDefinitionParser = new XMLDefinitionParser();
var avatar:Avatar = parser.parse(avatarXML) as Avatar;

var avatarArt:AvatarArt = new AvatarArt(avatar);
addChild(avatarArt);
}}}

Here, the XMLDefinitionParser parses the XML into an Avatar instance, complete with all Feature and Art definitions within.  When published, the resulting SWF is as you would expect:

<img src="http://www.myavatareditor.com/avatarcore/images/sample_bare_bones_swf.png" alt="Sample SWF" />

== Using Libraries ==

TBD