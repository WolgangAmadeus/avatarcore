#summary An introduction to the Avatar Core framework.
#labels Featured
#sidebar TableOfContents

<font color="#FF0000">Updated for ver 0.0.2</font>

Avatar Core is an open source, client-side framework for describing and displaying avatar characters.  Currently, it is implemented with Flash and ActionScript 3.0.

== Goals == 

The primary goal of Avatar Core is to make a simple, yet feature-rich framework for avatar creation and presentation that can be easily updated or changed with no or minimal interaction with source code.  More specifically, the framework should allow individual avatar characters, as well as the possible combinations that make up their characteristics, to be defined entirely in XML and loaded into an Avatar application (viewer or editor) at runtime giving complete control to the content creators.

== Basic Design == 

The framework is made up of a number of components, many of which are optional.  Typical usage includes the use of XML to define:
  * One or more Library objects
  * One or more Avatar objects
Library objects define the possible features (along with each variation) avatars can contain.  Each feature defined this way in a library is defined in a FeatureDefinition object.

Avatar objects define what features an avatar currently contain.  Avatars define these through Feature objects.  These can be self-contained, but when using libraries, will alternatively link to what is available from the possible selections within the library's related FeatureDefinition object.

<img src="http://www.myavatareditor.com/avatarcore/images/basic_uml_diagram.jpg" title="Basic UML Diagram" alt="Basic UML Diagram" />

Library and Avatar objects can be defined in XML.

{{{
<?xml version="1.0" encoding="utf-8" ?>
<Definitions xmlns="com.myavatareditor.avatarcore.data">

	<Library>
		
		<FeatureDefinition name="Nose">
			<artSet zIndex="2">
				<Art name="Round" src="NoseStandard" />
				<Art name="Piggy" src="NoseUp" />
				<Art name="Rigid" src="NoseRigid" />
			</artSet>
		</FeatureDefinition>
		
		<FeatureDefinition name="Mouth">
			<artSet zIndex="1">
				<Art name="Straight" src="MouthFlat" />
				<Art name="Grin" src="MouthGrin" />
			</artSet>
		</FeatureDefinition>
	</Library>

	<Avatar>
		<Feature name="Nose">
			<artName>Round</artName>
		</Feature>
		
		<Feature name="Mouth">
			<artName>Kissy</artName>
		</Feature>
	</Avatar>

</Definitions>
}}}

== Basic Workflow == 

An Editor application loads a Library definition from XML or creates one internally programmatically.  When a user decides to create an avatar, new, default Avatar and AvatarArt instances are created for the user.  The Avatar object references the library; the AvatarArt object references the Avatar.  As items are selected by the user from the library (its visual representation is determined by the custom editor client), they are added to and referenced from the Avatar object.  The AvatarArt is updated to reflect those changes so they can be seen visually.  When finished, The user saves and completes their work with the editor.

Upon saving, the editor has a few options:
  * A bitmap image can be created from the AvatarArt and provided to the user.  This can be presented as a download for the user or saved to a server for reference by unique URL.
  * The data in the Avatar object can be provided to the user. As with the image, this can be saved to a database and referenced through a unique id, or provided to the user as raw data.  Then an avatar viewer (e.g. a SWF that reads the saved avatar and its library to produce and display an AvatarArt) can be used to view that data.